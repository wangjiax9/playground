{"version":3,"sources":["../../../../../assets/script/global/assets/script/global/ResManager.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"../../../../../assets/script/global","sourcesContent":["\nexport default class ResManager {\n  // 龙骨资源根目录\n  private dragonRoot: string = 'dragon-bones'\n  \n  /**\n   * 预制资源\n   */\n  public prefab: any = {}\n\n  /**\n   * 贴图资源\n   */\n  public texture: any = {}\n  /**\n   * 加载进度组\n   * 相加为总进度\n   * [0]: 预制资源加载进度\n   * [1]: 龙骨资源加载进度\n   */\n  public perArr: Array<number> = []\n  /**\n   * 预制资源加载权重\n   */\n  public weightPrefab: number = 0.5\n  /**\n   * 贴图资源加载权重\n   */\n  public weightTexture: number = 0.5\n  /**\n   * 龙骨资源加载权重\n   */\n  public weightDragon: number = 0.5\n  /**\n   * 加载预制资源\n   */\n  public loadPrefab() {\n    const self = this\n    cc.loader.loadResDir('prefab', progressCbPrefab, (err, assets) => {\n      if (err) {\n        cc.error(err.message || err)\n        return\n      }\n      assets.forEach(asset => {\n        if (asset instanceof cc.Prefab) {\n          this.prefab[asset.name] = asset\n        }\n      })\n    })\n\n    function progressCbPrefab(count, total) {\n      let per = Math.round((count / total) * 100)\n      self.perArr[0] = per * self.weightPrefab\n      // cc.log(per)\n    }\n  }\n  /**\n   * 加载贴图资源\n   */\n  public loadTexture() {\n    const self = this\n    cc.loader.loadResDir('texture', progressCbPrefab, (err, assets) => {\n      if (err) {\n        cc.error(err.message || err)\n        return\n      }\n      assets.forEach(asset => {\n        if (asset instanceof cc.SpriteFrame) {\n          this.texture[asset.name] = asset\n        }\n      })\n    })\n\n    function progressCbPrefab(count, total) {\n      let per = Math.round((count / total) * 100)\n      self.perArr[1] = per * self.weightTexture\n      // cc.log(per)\n    }\n  }\n  /**\n   * 加载龙骨资源\n   */\n  public loadDragonBones() {\n    const self = this\n    cc.loader.loadResDir('dragon-bones/dragon', progressCbDragon, (err, assets) => {\n      if (err) {\n        cc.error(err.message || err)\n        return\n      }\n      cc.log(assets)\n    })\n    function progressCbDragon(count, total) {\n      let per = Math.round((count / total) * 100)\n      self.perArr[2] = per * self.weightDragon\n      // cc.log(per)\n    }\n  }\n  /**\n   * 加载资源\n   */\n  public load () {\n    this.loadPrefab()\n    this.loadTexture()\n  }\n  /**\n   * 获得当前加载进度\n   */\n  public getCurPer () {\n    if (this.perArr.length < 1) return\n    return this.perArr.reduce((accumulator, currentValue) => {\n      return accumulator + currentValue\n    })\n  }\n}"]}